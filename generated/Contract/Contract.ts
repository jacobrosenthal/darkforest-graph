// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ArrivalQueued extends ethereum.Event {
  get params(): ArrivalQueued__Params {
    return new ArrivalQueued__Params(this);
  }
}

export class ArrivalQueued__Params {
  _event: ArrivalQueued;

  constructor(event: ArrivalQueued) {
    this._event = event;
  }

  get arrivalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BoughtHat extends ethereum.Event {
  get params(): BoughtHat__Params {
    return new BoughtHat__Params(this);
  }
}

export class BoughtHat__Params {
  _event: BoughtHat;

  constructor(event: BoughtHat) {
    this._event = event;
  }

  get loc(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DepositedArtifact extends ethereum.Event {
  get params(): DepositedArtifact__Params {
    return new DepositedArtifact__Params(this);
  }
}

export class DepositedArtifact__Params {
  _event: DepositedArtifact;

  constructor(event: DepositedArtifact) {
    this._event = event;
  }

  get loc(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get artifactId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FoundArtifact extends ethereum.Event {
  get params(): FoundArtifact__Params {
    return new FoundArtifact__Params(this);
  }
}

export class FoundArtifact__Params {
  _event: FoundArtifact;

  constructor(event: FoundArtifact) {
    this._event = event;
  }

  get loc(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get artifactId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PlanetTransferred extends ethereum.Event {
  get params(): PlanetTransferred__Params {
    return new PlanetTransferred__Params(this);
  }
}

export class PlanetTransferred__Params {
  _event: PlanetTransferred;

  constructor(event: PlanetTransferred) {
    this._event = event;
  }

  get loc(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PlanetUpgraded extends ethereum.Event {
  get params(): PlanetUpgraded__Params {
    return new PlanetUpgraded__Params(this);
  }
}

export class PlanetUpgraded__Params {
  _event: PlanetUpgraded;

  constructor(event: PlanetUpgraded) {
    this._event = event;
  }

  get loc(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PlayerInitialized extends ethereum.Event {
  get params(): PlayerInitialized__Params {
    return new PlayerInitialized__Params(this);
  }
}

export class PlayerInitialized__Params {
  _event: PlayerInitialized;

  constructor(event: PlayerInitialized) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get loc(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrewArtifact extends ethereum.Event {
  get params(): WithdrewArtifact__Params {
    return new WithdrewArtifact__Params(this);
  }
}

export class WithdrewArtifact__Params {
  _event: WithdrewArtifact;

  constructor(event: WithdrewArtifact) {
    this._event = event;
  }

  get loc(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get artifactId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__bulkGetArtifactsByIdsResultRetStruct extends ethereum.Tuple {
  get artifact(): Contract__bulkGetArtifactsByIdsResultRetArtifactStruct {
    return this[0].toTuple() as Contract__bulkGetArtifactsByIdsResultRetArtifactStruct;
  }

  get upgrade(): Contract__bulkGetArtifactsByIdsResultRetUpgradeStruct {
    return this[1].toTuple() as Contract__bulkGetArtifactsByIdsResultRetUpgradeStruct;
  }

  get owner(): Address {
    return this[2].toAddress();
  }

  get locationId(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__bulkGetArtifactsByIdsResultRetArtifactStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get planetDiscoveredOn(): BigInt {
    return this[1].toBigInt();
  }

  get planetLevel(): BigInt {
    return this[2].toBigInt();
  }

  get planetBiome(): i32 {
    return this[3].toI32();
  }

  get mintedAtTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get discoverer(): Address {
    return this[5].toAddress();
  }

  get artifactType(): i32 {
    return this[6].toI32();
  }
}

export class Contract__bulkGetArtifactsByIdsResultRetUpgradeStruct extends ethereum.Tuple {
  get popCapMultiplier(): BigInt {
    return this[0].toBigInt();
  }

  get popGroMultiplier(): BigInt {
    return this[1].toBigInt();
  }

  get rangeMultiplier(): BigInt {
    return this[2].toBigInt();
  }

  get speedMultiplier(): BigInt {
    return this[3].toBigInt();
  }

  get defMultiplier(): BigInt {
    return this[4].toBigInt();
  }
}

export class Contract__bulkGetCompactArrivalsByIdsResultRetStruct extends ethereum.Tuple {
  get popArriving(): BigInt {
    return this[0].toBigInt();
  }

  get silverMoved(): BigInt {
    return this[1].toBigInt();
  }

  get departureTime(): BigInt {
    return this[2].toBigInt();
  }

  get arrivalTime(): BigInt {
    return this[3].toBigInt();
  }

  get fromPlanet(): BigInt {
    return this[4].toBigInt();
  }

  get fromPlanetOwner(): Address {
    return this[5].toAddress();
  }

  get fromPlanetPopulation(): BigInt {
    return this[6].toBigInt();
  }

  get fromPlanetSilver(): BigInt {
    return this[7].toBigInt();
  }

  get toPlanet(): BigInt {
    return this[8].toBigInt();
  }

  get toPlanetOwner(): Address {
    return this[9].toAddress();
  }

  get toPlanetPopulation(): BigInt {
    return this[10].toBigInt();
  }

  get toPlanetSilver(): BigInt {
    return this[11].toBigInt();
  }
}

export class Contract__bulkGetPlanetsResultRetStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get range(): BigInt {
    return this[1].toBigInt();
  }

  get speed(): BigInt {
    return this[2].toBigInt();
  }

  get defense(): BigInt {
    return this[3].toBigInt();
  }

  get population(): BigInt {
    return this[4].toBigInt();
  }

  get populationCap(): BigInt {
    return this[5].toBigInt();
  }

  get populationGrowth(): BigInt {
    return this[6].toBigInt();
  }

  get planetResource(): i32 {
    return this[7].toI32();
  }

  get silverCap(): BigInt {
    return this[8].toBigInt();
  }

  get silverGrowth(): BigInt {
    return this[9].toBigInt();
  }

  get silver(): BigInt {
    return this[10].toBigInt();
  }

  get planetLevel(): BigInt {
    return this[11].toBigInt();
  }
}

export class Contract__bulkGetPlanetsByIdsResultRetStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get range(): BigInt {
    return this[1].toBigInt();
  }

  get speed(): BigInt {
    return this[2].toBigInt();
  }

  get defense(): BigInt {
    return this[3].toBigInt();
  }

  get population(): BigInt {
    return this[4].toBigInt();
  }

  get populationCap(): BigInt {
    return this[5].toBigInt();
  }

  get populationGrowth(): BigInt {
    return this[6].toBigInt();
  }

  get planetResource(): i32 {
    return this[7].toI32();
  }

  get silverCap(): BigInt {
    return this[8].toBigInt();
  }

  get silverGrowth(): BigInt {
    return this[9].toBigInt();
  }

  get silver(): BigInt {
    return this[10].toBigInt();
  }

  get planetLevel(): BigInt {
    return this[11].toBigInt();
  }
}

export class Contract__bulkGetPlanetsExtendedInfoResultRetStruct extends ethereum.Tuple {
  get isInitialized(): boolean {
    return this[0].toBoolean();
  }

  get createdAt(): BigInt {
    return this[1].toBigInt();
  }

  get lastUpdated(): BigInt {
    return this[2].toBigInt();
  }

  get perlin(): BigInt {
    return this[3].toBigInt();
  }

  get spaceType(): i32 {
    return this[4].toI32();
  }

  get upgradeState0(): BigInt {
    return this[5].toBigInt();
  }

  get upgradeState1(): BigInt {
    return this[6].toBigInt();
  }

  get upgradeState2(): BigInt {
    return this[7].toBigInt();
  }

  get hatLevel(): BigInt {
    return this[8].toBigInt();
  }

  get hasTriedFindingArtifact(): boolean {
    return this[9].toBoolean();
  }

  get heldArtifactId(): BigInt {
    return this[10].toBigInt();
  }

  get artifactLockedTimestamp(): BigInt {
    return this[11].toBigInt();
  }
}

export class Contract__bulkGetPlanetsExtendedInfoByIdsResultRetStruct extends ethereum.Tuple {
  get isInitialized(): boolean {
    return this[0].toBoolean();
  }

  get createdAt(): BigInt {
    return this[1].toBigInt();
  }

  get lastUpdated(): BigInt {
    return this[2].toBigInt();
  }

  get perlin(): BigInt {
    return this[3].toBigInt();
  }

  get spaceType(): i32 {
    return this[4].toI32();
  }

  get upgradeState0(): BigInt {
    return this[5].toBigInt();
  }

  get upgradeState1(): BigInt {
    return this[6].toBigInt();
  }

  get upgradeState2(): BigInt {
    return this[7].toBigInt();
  }

  get hatLevel(): BigInt {
    return this[8].toBigInt();
  }

  get hasTriedFindingArtifact(): boolean {
    return this[9].toBoolean();
  }

  get heldArtifactId(): BigInt {
    return this[10].toBigInt();
  }

  get artifactLockedTimestamp(): BigInt {
    return this[11].toBigInt();
  }
}

export class Contract__getArtifactByIdResultRetStruct extends ethereum.Tuple {
  get artifact(): Contract__getArtifactByIdResultRetArtifactStruct {
    return this[0].toTuple() as Contract__getArtifactByIdResultRetArtifactStruct;
  }

  get upgrade(): Contract__getArtifactByIdResultRetUpgradeStruct {
    return this[1].toTuple() as Contract__getArtifactByIdResultRetUpgradeStruct;
  }

  get owner(): Address {
    return this[2].toAddress();
  }

  get locationId(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__getArtifactByIdResultRetArtifactStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get planetDiscoveredOn(): BigInt {
    return this[1].toBigInt();
  }

  get planetLevel(): BigInt {
    return this[2].toBigInt();
  }

  get planetBiome(): i32 {
    return this[3].toI32();
  }

  get mintedAtTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get discoverer(): Address {
    return this[5].toAddress();
  }

  get artifactType(): i32 {
    return this[6].toI32();
  }
}

export class Contract__getArtifactByIdResultRetUpgradeStruct extends ethereum.Tuple {
  get popCapMultiplier(): BigInt {
    return this[0].toBigInt();
  }

  get popGroMultiplier(): BigInt {
    return this[1].toBigInt();
  }

  get rangeMultiplier(): BigInt {
    return this[2].toBigInt();
  }

  get speedMultiplier(): BigInt {
    return this[3].toBigInt();
  }

  get defMultiplier(): BigInt {
    return this[4].toBigInt();
  }
}

export class Contract__getDefaultStatsResultValue0Struct extends ethereum.Tuple {
  get label(): string {
    return this[0].toString();
  }

  get populationCap(): BigInt {
    return this[1].toBigInt();
  }

  get populationGrowth(): BigInt {
    return this[2].toBigInt();
  }

  get range(): BigInt {
    return this[3].toBigInt();
  }

  get speed(): BigInt {
    return this[4].toBigInt();
  }

  get defense(): BigInt {
    return this[5].toBigInt();
  }

  get silverGrowth(): BigInt {
    return this[6].toBigInt();
  }

  get silverCap(): BigInt {
    return this[7].toBigInt();
  }

  get barbarianPercentage(): BigInt {
    return this[8].toBigInt();
  }
}

export class Contract__getPlanetArrivalsResultRetStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get player(): Address {
    return this[1].toAddress();
  }

  get fromPlanet(): BigInt {
    return this[2].toBigInt();
  }

  get toPlanet(): BigInt {
    return this[3].toBigInt();
  }

  get popArriving(): BigInt {
    return this[4].toBigInt();
  }

  get silverMoved(): BigInt {
    return this[5].toBigInt();
  }

  get departureTime(): BigInt {
    return this[6].toBigInt();
  }

  get arrivalTime(): BigInt {
    return this[7].toBigInt();
  }
}

export class Contract__planetArrivalsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class Contract__planetDefaultStatsResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }
}

export class Contract__planetEventsResult {
  value0: BigInt;
  value1: i32;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: i32, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Contract__planetsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: i32;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: i32,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }
}

export class Contract__planetsExtendedInfoResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: i32;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: boolean;
  value10: BigInt;
  value11: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: i32,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: boolean,
    value10: BigInt,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }
}

export class Contract__upgradePlanetResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__upgradesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  ARTIFACT_LOCKUP_DURATION_SECONDS(): BigInt {
    let result = super.call(
      "ARTIFACT_LOCKUP_DURATION_SECONDS",
      "ARTIFACT_LOCKUP_DURATION_SECONDS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ARTIFACT_LOCKUP_DURATION_SECONDS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ARTIFACT_LOCKUP_DURATION_SECONDS",
      "ARTIFACT_LOCKUP_DURATION_SECONDS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BIOME_THRESHOLD_1(): BigInt {
    let result = super.call(
      "BIOME_THRESHOLD_1",
      "BIOME_THRESHOLD_1():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BIOME_THRESHOLD_1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BIOME_THRESHOLD_1",
      "BIOME_THRESHOLD_1():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BIOME_THRESHOLD_2(): BigInt {
    let result = super.call(
      "BIOME_THRESHOLD_2",
      "BIOME_THRESHOLD_2():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BIOME_THRESHOLD_2(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BIOME_THRESHOLD_2",
      "BIOME_THRESHOLD_2():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DISABLE_ZK_CHECK(): boolean {
    let result = super.call(
      "DISABLE_ZK_CHECK",
      "DISABLE_ZK_CHECK():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_DISABLE_ZK_CHECK(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "DISABLE_ZK_CHECK",
      "DISABLE_ZK_CHECK():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  PERLIN_THRESHOLD_1(): BigInt {
    let result = super.call(
      "PERLIN_THRESHOLD_1",
      "PERLIN_THRESHOLD_1():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERLIN_THRESHOLD_1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERLIN_THRESHOLD_1",
      "PERLIN_THRESHOLD_1():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERLIN_THRESHOLD_2(): BigInt {
    let result = super.call(
      "PERLIN_THRESHOLD_2",
      "PERLIN_THRESHOLD_2():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERLIN_THRESHOLD_2(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERLIN_THRESHOLD_2",
      "PERLIN_THRESHOLD_2():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PLANET_RARITY(): BigInt {
    let result = super.call("PLANET_RARITY", "PLANET_RARITY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PLANET_RARITY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PLANET_RARITY",
      "PLANET_RARITY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SILVER_RARITY_1(): BigInt {
    let result = super.call(
      "SILVER_RARITY_1",
      "SILVER_RARITY_1():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SILVER_RARITY_1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SILVER_RARITY_1",
      "SILVER_RARITY_1():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SILVER_RARITY_2(): BigInt {
    let result = super.call(
      "SILVER_RARITY_2",
      "SILVER_RARITY_2():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SILVER_RARITY_2(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SILVER_RARITY_2",
      "SILVER_RARITY_2():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SILVER_RARITY_3(): BigInt {
    let result = super.call(
      "SILVER_RARITY_3",
      "SILVER_RARITY_3():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SILVER_RARITY_3(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SILVER_RARITY_3",
      "SILVER_RARITY_3():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TIME_FACTOR_HUNDREDTHS(): BigInt {
    let result = super.call(
      "TIME_FACTOR_HUNDREDTHS",
      "TIME_FACTOR_HUNDREDTHS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_TIME_FACTOR_HUNDREDTHS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TIME_FACTOR_HUNDREDTHS",
      "TIME_FACTOR_HUNDREDTHS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _locationIdValid(_loc: BigInt): boolean {
    let result = super.call(
      "_locationIdValid",
      "_locationIdValid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_loc)]
    );

    return result[0].toBoolean();
  }

  try__locationIdValid(_loc: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_locationIdValid",
      "_locationIdValid(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_loc)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  adminAddress(): Address {
    let result = super.call("adminAddress", "adminAddress():(address)", []);

    return result[0].toAddress();
  }

  try_adminAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("adminAddress", "adminAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bulkGetArtifactsByIds(
    ids: Array<BigInt>
  ): Array<Contract__bulkGetArtifactsByIdsResultRetStruct> {
    let result = super.call(
      "bulkGetArtifactsByIds",
      "bulkGetArtifactsByIds(uint256[]):(((uint256,uint256,uint256,uint8,uint256,address,uint8),(uint256,uint256,uint256,uint256,uint256),address,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(ids)]
    );

    return result[0].toTupleArray<
      Contract__bulkGetArtifactsByIdsResultRetStruct
    >();
  }

  try_bulkGetArtifactsByIds(
    ids: Array<BigInt>
  ): ethereum.CallResult<
    Array<Contract__bulkGetArtifactsByIdsResultRetStruct>
  > {
    let result = super.tryCall(
      "bulkGetArtifactsByIds",
      "bulkGetArtifactsByIds(uint256[]):(((uint256,uint256,uint256,uint8,uint256,address,uint8),(uint256,uint256,uint256,uint256,uint256),address,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(ids)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__bulkGetArtifactsByIdsResultRetStruct>()
    );
  }

  bulkGetCompactArrivalsByIds(
    ids: Array<BigInt>
  ): Array<Contract__bulkGetCompactArrivalsByIdsResultRetStruct> {
    let result = super.call(
      "bulkGetCompactArrivalsByIds",
      "bulkGetCompactArrivalsByIds(uint256[]):((uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,address,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(ids)]
    );

    return result[0].toTupleArray<
      Contract__bulkGetCompactArrivalsByIdsResultRetStruct
    >();
  }

  try_bulkGetCompactArrivalsByIds(
    ids: Array<BigInt>
  ): ethereum.CallResult<
    Array<Contract__bulkGetCompactArrivalsByIdsResultRetStruct>
  > {
    let result = super.tryCall(
      "bulkGetCompactArrivalsByIds",
      "bulkGetCompactArrivalsByIds(uint256[]):((uint256,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256,address,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(ids)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        Contract__bulkGetCompactArrivalsByIdsResultRetStruct
      >()
    );
  }

  bulkGetPlanetIds(startIdx: BigInt, endIdx: BigInt): Array<BigInt> {
    let result = super.call(
      "bulkGetPlanetIds",
      "bulkGetPlanetIds(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIdx),
        ethereum.Value.fromUnsignedBigInt(endIdx)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_bulkGetPlanetIds(
    startIdx: BigInt,
    endIdx: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "bulkGetPlanetIds",
      "bulkGetPlanetIds(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIdx),
        ethereum.Value.fromUnsignedBigInt(endIdx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  bulkGetPlanets(
    startIdx: BigInt,
    endIdx: BigInt
  ): Array<Contract__bulkGetPlanetsResultRetStruct> {
    let result = super.call(
      "bulkGetPlanets",
      "bulkGetPlanets(uint256,uint256):((address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIdx),
        ethereum.Value.fromUnsignedBigInt(endIdx)
      ]
    );

    return result[0].toTupleArray<Contract__bulkGetPlanetsResultRetStruct>();
  }

  try_bulkGetPlanets(
    startIdx: BigInt,
    endIdx: BigInt
  ): ethereum.CallResult<Array<Contract__bulkGetPlanetsResultRetStruct>> {
    let result = super.tryCall(
      "bulkGetPlanets",
      "bulkGetPlanets(uint256,uint256):((address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIdx),
        ethereum.Value.fromUnsignedBigInt(endIdx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__bulkGetPlanetsResultRetStruct>()
    );
  }

  bulkGetPlanetsByIds(
    ids: Array<BigInt>
  ): Array<Contract__bulkGetPlanetsByIdsResultRetStruct> {
    let result = super.call(
      "bulkGetPlanetsByIds",
      "bulkGetPlanetsByIds(uint256[]):((address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(ids)]
    );

    return result[0].toTupleArray<
      Contract__bulkGetPlanetsByIdsResultRetStruct
    >();
  }

  try_bulkGetPlanetsByIds(
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<Contract__bulkGetPlanetsByIdsResultRetStruct>> {
    let result = super.tryCall(
      "bulkGetPlanetsByIds",
      "bulkGetPlanetsByIds(uint256[]):((address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(ids)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__bulkGetPlanetsByIdsResultRetStruct>()
    );
  }

  bulkGetPlanetsExtendedInfo(
    startIdx: BigInt,
    endIdx: BigInt
  ): Array<Contract__bulkGetPlanetsExtendedInfoResultRetStruct> {
    let result = super.call(
      "bulkGetPlanetsExtendedInfo",
      "bulkGetPlanetsExtendedInfo(uint256,uint256):((bool,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,bool,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIdx),
        ethereum.Value.fromUnsignedBigInt(endIdx)
      ]
    );

    return result[0].toTupleArray<
      Contract__bulkGetPlanetsExtendedInfoResultRetStruct
    >();
  }

  try_bulkGetPlanetsExtendedInfo(
    startIdx: BigInt,
    endIdx: BigInt
  ): ethereum.CallResult<
    Array<Contract__bulkGetPlanetsExtendedInfoResultRetStruct>
  > {
    let result = super.tryCall(
      "bulkGetPlanetsExtendedInfo",
      "bulkGetPlanetsExtendedInfo(uint256,uint256):((bool,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,bool,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIdx),
        ethereum.Value.fromUnsignedBigInt(endIdx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        Contract__bulkGetPlanetsExtendedInfoResultRetStruct
      >()
    );
  }

  bulkGetPlanetsExtendedInfoByIds(
    ids: Array<BigInt>
  ): Array<Contract__bulkGetPlanetsExtendedInfoByIdsResultRetStruct> {
    let result = super.call(
      "bulkGetPlanetsExtendedInfoByIds",
      "bulkGetPlanetsExtendedInfoByIds(uint256[]):((bool,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,bool,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(ids)]
    );

    return result[0].toTupleArray<
      Contract__bulkGetPlanetsExtendedInfoByIdsResultRetStruct
    >();
  }

  try_bulkGetPlanetsExtendedInfoByIds(
    ids: Array<BigInt>
  ): ethereum.CallResult<
    Array<Contract__bulkGetPlanetsExtendedInfoByIdsResultRetStruct>
  > {
    let result = super.tryCall(
      "bulkGetPlanetsExtendedInfoByIds",
      "bulkGetPlanetsExtendedInfoByIds(uint256[]):((bool,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,bool,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(ids)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        Contract__bulkGetPlanetsExtendedInfoByIdsResultRetStruct
      >()
    );
  }

  bulkGetPlayers(startIdx: BigInt, endIdx: BigInt): Array<Address> {
    let result = super.call(
      "bulkGetPlayers",
      "bulkGetPlayers(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIdx),
        ethereum.Value.fromUnsignedBigInt(endIdx)
      ]
    );

    return result[0].toAddressArray();
  }

  try_bulkGetPlayers(
    startIdx: BigInt,
    endIdx: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "bulkGetPlayers",
      "bulkGetPlayers(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIdx),
        ethereum.Value.fromUnsignedBigInt(endIdx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  contractOwnedArtifactLocations(param0: BigInt): BigInt {
    let result = super.call(
      "contractOwnedArtifactLocations",
      "contractOwnedArtifactLocations(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_contractOwnedArtifactLocations(
    param0: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractOwnedArtifactLocations",
      "contractOwnedArtifactLocations(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cumulativeRarities(param0: BigInt): BigInt {
    let result = super.call(
      "cumulativeRarities",
      "cumulativeRarities(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_cumulativeRarities(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cumulativeRarities",
      "cumulativeRarities(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  doesArtifactExist(tokenId: BigInt): boolean {
    let result = super.call(
      "doesArtifactExist",
      "doesArtifactExist(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBoolean();
  }

  try_doesArtifactExist(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "doesArtifactExist",
      "doesArtifactExist(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getArtifactById(
    artifactId: BigInt
  ): Contract__getArtifactByIdResultRetStruct {
    let result = super.call(
      "getArtifactById",
      "getArtifactById(uint256):(((uint256,uint256,uint256,uint8,uint256,address,uint8),(uint256,uint256,uint256,uint256,uint256),address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(artifactId)]
    );

    return result[0].toTuple() as Contract__getArtifactByIdResultRetStruct;
  }

  try_getArtifactById(
    artifactId: BigInt
  ): ethereum.CallResult<Contract__getArtifactByIdResultRetStruct> {
    let result = super.tryCall(
      "getArtifactById",
      "getArtifactById(uint256):(((uint256,uint256,uint256,uint8,uint256,address,uint8),(uint256,uint256,uint256,uint256,uint256),address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(artifactId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__getArtifactByIdResultRetStruct
    );
  }

  getDefaultStats(): Array<Contract__getDefaultStatsResultValue0Struct> {
    let result = super.call(
      "getDefaultStats",
      "getDefaultStats():((string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      Contract__getDefaultStatsResultValue0Struct
    >();
  }

  try_getDefaultStats(): ethereum.CallResult<
    Array<Contract__getDefaultStatsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getDefaultStats",
      "getDefaultStats():((string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__getDefaultStatsResultValue0Struct>()
    );
  }

  getNPlanets(): BigInt {
    let result = super.call("getNPlanets", "getNPlanets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNPlanets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNPlanets", "getNPlanets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNPlayers(): BigInt {
    let result = super.call("getNPlayers", "getNPlayers():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNPlayers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNPlayers", "getNPlayers():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPlanetArrivals(
    _location: BigInt
  ): Array<Contract__getPlanetArrivalsResultRetStruct> {
    let result = super.call(
      "getPlanetArrivals",
      "getPlanetArrivals(uint256):((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(_location)]
    );

    return result[0].toTupleArray<Contract__getPlanetArrivalsResultRetStruct>();
  }

  try_getPlanetArrivals(
    _location: BigInt
  ): ethereum.CallResult<Array<Contract__getPlanetArrivalsResultRetStruct>> {
    let result = super.tryCall(
      "getPlanetArrivals",
      "getPlanetArrivals(uint256):((uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(_location)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__getPlanetArrivalsResultRetStruct>()
    );
  }

  getPlanetCumulativeRarities(): Array<BigInt> {
    let result = super.call(
      "getPlanetCumulativeRarities",
      "getPlanetCumulativeRarities():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getPlanetCumulativeRarities(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPlanetCumulativeRarities",
      "getPlanetCumulativeRarities():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPlanetLevelThresholds(): Array<BigInt> {
    let result = super.call(
      "getPlanetLevelThresholds",
      "getPlanetLevelThresholds():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getPlanetLevelThresholds(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPlanetLevelThresholds",
      "getPlanetLevelThresholds():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPlayerArtifactIds(playerId: Address): Array<BigInt> {
    let result = super.call(
      "getPlayerArtifactIds",
      "getPlayerArtifactIds(address):(uint256[])",
      [ethereum.Value.fromAddress(playerId)]
    );

    return result[0].toBigIntArray();
  }

  try_getPlayerArtifactIds(
    playerId: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPlayerArtifactIds",
      "getPlayerArtifactIds(address):(uint256[])",
      [ethereum.Value.fromAddress(playerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  initializedPlanetCountByLevel(param0: BigInt): BigInt {
    let result = super.call(
      "initializedPlanetCountByLevel",
      "initializedPlanetCountByLevel(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_initializedPlanetCountByLevel(
    param0: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initializedPlanetCountByLevel",
      "initializedPlanetCountByLevel(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isPlayerInitialized(param0: Address): boolean {
    let result = super.call(
      "isPlayerInitialized",
      "isPlayerInitialized(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isPlayerInitialized(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPlayerInitialized",
      "isPlayerInitialized(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  planetArrivals(param0: BigInt): Contract__planetArrivalsResult {
    let result = super.call(
      "planetArrivals",
      "planetArrivals(uint256):(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__planetArrivalsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_planetArrivals(
    param0: BigInt
  ): ethereum.CallResult<Contract__planetArrivalsResult> {
    let result = super.tryCall(
      "planetArrivals",
      "planetArrivals(uint256):(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__planetArrivalsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  planetDefaultStats(param0: BigInt): Contract__planetDefaultStatsResult {
    let result = super.call(
      "planetDefaultStats",
      "planetDefaultStats(uint256):(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__planetDefaultStatsResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt()
    );
  }

  try_planetDefaultStats(
    param0: BigInt
  ): ethereum.CallResult<Contract__planetDefaultStatsResult> {
    let result = super.tryCall(
      "planetDefaultStats",
      "planetDefaultStats(uint256):(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__planetDefaultStatsResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt()
      )
    );
  }

  planetEvents(param0: BigInt, param1: BigInt): Contract__planetEventsResult {
    let result = super.call(
      "planetEvents",
      "planetEvents(uint256,uint256):(uint256,uint8,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Contract__planetEventsResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_planetEvents(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Contract__planetEventsResult> {
    let result = super.tryCall(
      "planetEvents",
      "planetEvents(uint256,uint256):(uint256,uint8,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__planetEventsResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  planetEventsCount(): BigInt {
    let result = super.call(
      "planetEventsCount",
      "planetEventsCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_planetEventsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "planetEventsCount",
      "planetEventsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  planetIds(param0: BigInt): BigInt {
    let result = super.call("planetIds", "planetIds(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_planetIds(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("planetIds", "planetIds(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  planetLevelThresholds(param0: BigInt): BigInt {
    let result = super.call(
      "planetLevelThresholds",
      "planetLevelThresholds(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_planetLevelThresholds(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "planetLevelThresholds",
      "planetLevelThresholds(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  planets(param0: BigInt): Contract__planetsResult {
    let result = super.call(
      "planets",
      "planets(uint256):(address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__planetsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toI32(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt()
    );
  }

  try_planets(param0: BigInt): ethereum.CallResult<Contract__planetsResult> {
    let result = super.tryCall(
      "planets",
      "planets(uint256):(address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__planetsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toI32(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt()
      )
    );
  }

  planetsExtendedInfo(param0: BigInt): Contract__planetsExtendedInfoResult {
    let result = super.call(
      "planetsExtendedInfo",
      "planetsExtendedInfo(uint256):(bool,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,bool,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__planetsExtendedInfoResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBoolean(),
      result[10].toBigInt(),
      result[11].toBigInt()
    );
  }

  try_planetsExtendedInfo(
    param0: BigInt
  ): ethereum.CallResult<Contract__planetsExtendedInfoResult> {
    let result = super.tryCall(
      "planetsExtendedInfo",
      "planetsExtendedInfo(uint256):(bool,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,bool,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__planetsExtendedInfoResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBoolean(),
        value[10].toBigInt(),
        value[11].toBigInt()
      )
    );
  }

  playerIds(param0: BigInt): Address {
    let result = super.call("playerIds", "playerIds(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_playerIds(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("playerIds", "playerIds(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  upgradePlanet(
    _location: BigInt,
    _branch: BigInt
  ): Contract__upgradePlanetResult {
    let result = super.call(
      "upgradePlanet",
      "upgradePlanet(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_location),
        ethereum.Value.fromUnsignedBigInt(_branch)
      ]
    );

    return new Contract__upgradePlanetResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_upgradePlanet(
    _location: BigInt,
    _branch: BigInt
  ): ethereum.CallResult<Contract__upgradePlanetResult> {
    let result = super.tryCall(
      "upgradePlanet",
      "upgradePlanet(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_location),
        ethereum.Value.fromUnsignedBigInt(_branch)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__upgradePlanetResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  upgrades(param0: BigInt, param1: BigInt): Contract__upgradesResult {
    let result = super.call(
      "upgrades",
      "upgrades(uint256,uint256):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Contract__upgradesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_upgrades(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Contract__upgradesResult> {
    let result = super.tryCall(
      "upgrades",
      "upgrades(uint256,uint256):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__upgradesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  worldRadius(): BigInt {
    let result = super.call("worldRadius", "worldRadius():(uint256)", []);

    return result[0].toBigInt();
  }

  try_worldRadius(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("worldRadius", "worldRadius():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BuyHatCall extends ethereum.Call {
  get inputs(): BuyHatCall__Inputs {
    return new BuyHatCall__Inputs(this);
  }

  get outputs(): BuyHatCall__Outputs {
    return new BuyHatCall__Outputs(this);
  }
}

export class BuyHatCall__Inputs {
  _call: BuyHatCall;

  constructor(call: BuyHatCall) {
    this._call = call;
  }

  get _location(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyHatCall__Outputs {
  _call: BuyHatCall;

  constructor(call: BuyHatCall) {
    this._call = call;
  }
}

export class ChangeAdminCall extends ethereum.Call {
  get inputs(): ChangeAdminCall__Inputs {
    return new ChangeAdminCall__Inputs(this);
  }

  get outputs(): ChangeAdminCall__Outputs {
    return new ChangeAdminCall__Outputs(this);
  }
}

export class ChangeAdminCall__Inputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }

  get _newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeAdminCall__Outputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }
}

export class ChangeTarget4RadiusConstantCall extends ethereum.Call {
  get inputs(): ChangeTarget4RadiusConstantCall__Inputs {
    return new ChangeTarget4RadiusConstantCall__Inputs(this);
  }

  get outputs(): ChangeTarget4RadiusConstantCall__Outputs {
    return new ChangeTarget4RadiusConstantCall__Outputs(this);
  }
}

export class ChangeTarget4RadiusConstantCall__Inputs {
  _call: ChangeTarget4RadiusConstantCall;

  constructor(call: ChangeTarget4RadiusConstantCall) {
    this._call = call;
  }

  get _newConstant(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeTarget4RadiusConstantCall__Outputs {
  _call: ChangeTarget4RadiusConstantCall;

  constructor(call: ChangeTarget4RadiusConstantCall) {
    this._call = call;
  }
}

export class ChangeTokenMintEndTimeCall extends ethereum.Call {
  get inputs(): ChangeTokenMintEndTimeCall__Inputs {
    return new ChangeTokenMintEndTimeCall__Inputs(this);
  }

  get outputs(): ChangeTokenMintEndTimeCall__Outputs {
    return new ChangeTokenMintEndTimeCall__Outputs(this);
  }
}

export class ChangeTokenMintEndTimeCall__Inputs {
  _call: ChangeTokenMintEndTimeCall;

  constructor(call: ChangeTokenMintEndTimeCall) {
    this._call = call;
  }

  get _newEnd(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeTokenMintEndTimeCall__Outputs {
  _call: ChangeTokenMintEndTimeCall;

  constructor(call: ChangeTokenMintEndTimeCall) {
    this._call = call;
  }
}

export class DepositArtifactCall extends ethereum.Call {
  get inputs(): DepositArtifactCall__Inputs {
    return new DepositArtifactCall__Inputs(this);
  }

  get outputs(): DepositArtifactCall__Outputs {
    return new DepositArtifactCall__Outputs(this);
  }
}

export class DepositArtifactCall__Inputs {
  _call: DepositArtifactCall;

  constructor(call: DepositArtifactCall) {
    this._call = call;
  }

  get locationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get artifactId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositArtifactCall__Outputs {
  _call: DepositArtifactCall;

  constructor(call: DepositArtifactCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _adminAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _whitelistAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokensAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _disableZKCheck(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RefreshPlanetCall extends ethereum.Call {
  get inputs(): RefreshPlanetCall__Inputs {
    return new RefreshPlanetCall__Inputs(this);
  }

  get outputs(): RefreshPlanetCall__Outputs {
    return new RefreshPlanetCall__Outputs(this);
  }
}

export class RefreshPlanetCall__Inputs {
  _call: RefreshPlanetCall;

  constructor(call: RefreshPlanetCall) {
    this._call = call;
  }

  get _location(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RefreshPlanetCall__Outputs {
  _call: RefreshPlanetCall;

  constructor(call: RefreshPlanetCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _location(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _player(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpgradePlanetCall extends ethereum.Call {
  get inputs(): UpgradePlanetCall__Inputs {
    return new UpgradePlanetCall__Inputs(this);
  }

  get outputs(): UpgradePlanetCall__Outputs {
    return new UpgradePlanetCall__Outputs(this);
  }
}

export class UpgradePlanetCall__Inputs {
  _call: UpgradePlanetCall;

  constructor(call: UpgradePlanetCall) {
    this._call = call;
  }

  get _location(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _branch(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpgradePlanetCall__Outputs {
  _call: UpgradePlanetCall;

  constructor(call: UpgradePlanetCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawArtifactCall extends ethereum.Call {
  get inputs(): WithdrawArtifactCall__Inputs {
    return new WithdrawArtifactCall__Inputs(this);
  }

  get outputs(): WithdrawArtifactCall__Outputs {
    return new WithdrawArtifactCall__Outputs(this);
  }
}

export class WithdrawArtifactCall__Inputs {
  _call: WithdrawArtifactCall;

  constructor(call: WithdrawArtifactCall) {
    this._call = call;
  }

  get locationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawArtifactCall__Outputs {
  _call: WithdrawArtifactCall;

  constructor(call: WithdrawArtifactCall) {
    this._call = call;
  }
}
