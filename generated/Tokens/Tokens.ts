// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Tokens__createArtifactResultValue0Struct extends ethereum.Tuple {
  get isInitialized(): boolean {
    return this[0].toBoolean();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }

  get planetDiscoveredOn(): BigInt {
    return this[2].toBigInt();
  }

  get rarity(): i32 {
    return this[3].toI32();
  }

  get planetBiome(): i32 {
    return this[4].toI32();
  }

  get mintedAtTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get discoverer(): Address {
    return this[6].toAddress();
  }

  get artifactType(): i32 {
    return this[7].toI32();
  }

  get lastActivated(): BigInt {
    return this[8].toBigInt();
  }

  get lastDeactivated(): BigInt {
    return this[9].toBigInt();
  }

  get wormholeTo(): BigInt {
    return this[10].toBigInt();
  }
}

export class Tokens__getArtifactResultValue0Struct extends ethereum.Tuple {
  get isInitialized(): boolean {
    return this[0].toBoolean();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }

  get planetDiscoveredOn(): BigInt {
    return this[2].toBigInt();
  }

  get rarity(): i32 {
    return this[3].toI32();
  }

  get planetBiome(): i32 {
    return this[4].toI32();
  }

  get mintedAtTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get discoverer(): Address {
    return this[6].toAddress();
  }

  get artifactType(): i32 {
    return this[7].toI32();
  }

  get lastActivated(): BigInt {
    return this[8].toBigInt();
  }

  get lastDeactivated(): BigInt {
    return this[9].toBigInt();
  }

  get wormholeTo(): BigInt {
    return this[10].toBigInt();
  }
}

export class Tokens extends ethereum.SmartContract {
  static bind(address: Address): Tokens {
    return new Tokens("Tokens", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  createArtifact(
    tokenId: BigInt,
    discoverer: Address,
    planetId: BigInt,
    rarity: i32,
    biome: i32,
    artifactType: i32,
    owner: Address
  ): Tokens__createArtifactResultValue0Struct {
    let result = super.call(
      "createArtifact",
      "createArtifact(uint256,address,uint256,uint8,uint8,uint8,address):((bool,uint256,uint256,uint8,uint8,uint256,address,uint8,uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(discoverer),
        ethereum.Value.fromUnsignedBigInt(planetId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(rarity)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(biome)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(artifactType)),
        ethereum.Value.fromAddress(owner)
      ]
    );

    return result[0].toTuple() as Tokens__createArtifactResultValue0Struct;
  }

  try_createArtifact(
    tokenId: BigInt,
    discoverer: Address,
    planetId: BigInt,
    rarity: i32,
    biome: i32,
    artifactType: i32,
    owner: Address
  ): ethereum.CallResult<Tokens__createArtifactResultValue0Struct> {
    let result = super.tryCall(
      "createArtifact",
      "createArtifact(uint256,address,uint256,uint8,uint8,uint8,address):((bool,uint256,uint256,uint8,uint8,uint256,address,uint8,uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(discoverer),
        ethereum.Value.fromUnsignedBigInt(planetId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(rarity)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(biome)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(artifactType)),
        ethereum.Value.fromAddress(owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Tokens__createArtifactResultValue0Struct
    );
  }

  doesArtifactExist(tokenId: BigInt): boolean {
    let result = super.call(
      "doesArtifactExist",
      "doesArtifactExist(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBoolean();
  }

  try_doesArtifactExist(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "doesArtifactExist",
      "doesArtifactExist(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getArtifact(tokenId: BigInt): Tokens__getArtifactResultValue0Struct {
    let result = super.call(
      "getArtifact",
      "getArtifact(uint256):((bool,uint256,uint256,uint8,uint8,uint256,address,uint8,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toTuple() as Tokens__getArtifactResultValue0Struct;
  }

  try_getArtifact(
    tokenId: BigInt
  ): ethereum.CallResult<Tokens__getArtifactResultValue0Struct> {
    let result = super.tryCall(
      "getArtifact",
      "getArtifact(uint256):((bool,uint256,uint256,uint8,uint8,uint256,address,uint8,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Tokens__getArtifactResultValue0Struct
    );
  }

  getPlayerArtifactIds(playerId: Address): Array<BigInt> {
    let result = super.call(
      "getPlayerArtifactIds",
      "getPlayerArtifactIds(address):(uint256[])",
      [ethereum.Value.fromAddress(playerId)]
    );

    return result[0].toBigIntArray();
  }

  try_getPlayerArtifactIds(
    playerId: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPlayerArtifactIds",
      "getPlayerArtifactIds(address):(uint256[])",
      [ethereum.Value.fromAddress(playerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CreateArtifactCall extends ethereum.Call {
  get inputs(): CreateArtifactCall__Inputs {
    return new CreateArtifactCall__Inputs(this);
  }

  get outputs(): CreateArtifactCall__Outputs {
    return new CreateArtifactCall__Outputs(this);
  }
}

export class CreateArtifactCall__Inputs {
  _call: CreateArtifactCall;

  constructor(call: CreateArtifactCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get discoverer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get planetId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get rarity(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get biome(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get artifactType(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get owner(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class CreateArtifactCall__Outputs {
  _call: CreateArtifactCall;

  constructor(call: CreateArtifactCall) {
    this._call = call;
  }

  get value0(): CreateArtifactCallValue0Struct {
    return this._call.outputValues[0].value.toTuple() as CreateArtifactCallValue0Struct;
  }
}

export class CreateArtifactCallValue0Struct extends ethereum.Tuple {
  get isInitialized(): boolean {
    return this[0].toBoolean();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }

  get planetDiscoveredOn(): BigInt {
    return this[2].toBigInt();
  }

  get rarity(): i32 {
    return this[3].toI32();
  }

  get planetBiome(): i32 {
    return this[4].toI32();
  }

  get mintedAtTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get discoverer(): Address {
    return this[6].toAddress();
  }

  get artifactType(): i32 {
    return this[7].toI32();
  }

  get lastActivated(): BigInt {
    return this[8].toBigInt();
  }

  get lastDeactivated(): BigInt {
    return this[9].toBigInt();
  }

  get wormholeTo(): BigInt {
    return this[10].toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _coreAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _adminAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseUriCall extends ethereum.Call {
  get inputs(): SetBaseUriCall__Inputs {
    return new SetBaseUriCall__Inputs(this);
  }

  get outputs(): SetBaseUriCall__Outputs {
    return new SetBaseUriCall__Outputs(this);
  }
}

export class SetBaseUriCall__Inputs {
  _call: SetBaseUriCall;

  constructor(call: SetBaseUriCall) {
    this._call = call;
  }
}

export class SetBaseUriCall__Outputs {
  _call: SetBaseUriCall;

  constructor(call: SetBaseUriCall) {
    this._call = call;
  }
}

export class TransferArtifactCall extends ethereum.Call {
  get inputs(): TransferArtifactCall__Inputs {
    return new TransferArtifactCall__Inputs(this);
  }

  get outputs(): TransferArtifactCall__Outputs {
    return new TransferArtifactCall__Outputs(this);
  }
}

export class TransferArtifactCall__Inputs {
  _call: TransferArtifactCall;

  constructor(call: TransferArtifactCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferArtifactCall__Outputs {
  _call: TransferArtifactCall;

  constructor(call: TransferArtifactCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UpdateArtifactCall extends ethereum.Call {
  get inputs(): UpdateArtifactCall__Inputs {
    return new UpdateArtifactCall__Inputs(this);
  }

  get outputs(): UpdateArtifactCall__Outputs {
    return new UpdateArtifactCall__Outputs(this);
  }
}

export class UpdateArtifactCall__Inputs {
  _call: UpdateArtifactCall;

  constructor(call: UpdateArtifactCall) {
    this._call = call;
  }

  get updatedArtifact(): UpdateArtifactCallUpdatedArtifactStruct {
    return this._call.inputValues[0].value.toTuple() as UpdateArtifactCallUpdatedArtifactStruct;
  }
}

export class UpdateArtifactCall__Outputs {
  _call: UpdateArtifactCall;

  constructor(call: UpdateArtifactCall) {
    this._call = call;
  }
}

export class UpdateArtifactCallUpdatedArtifactStruct extends ethereum.Tuple {
  get isInitialized(): boolean {
    return this[0].toBoolean();
  }

  get id(): BigInt {
    return this[1].toBigInt();
  }

  get planetDiscoveredOn(): BigInt {
    return this[2].toBigInt();
  }

  get rarity(): i32 {
    return this[3].toI32();
  }

  get planetBiome(): i32 {
    return this[4].toI32();
  }

  get mintedAtTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get discoverer(): Address {
    return this[6].toAddress();
  }

  get artifactType(): i32 {
    return this[7].toI32();
  }

  get lastActivated(): BigInt {
    return this[8].toBigInt();
  }

  get lastDeactivated(): BigInt {
    return this[9].toBigInt();
  }

  get wormholeTo(): BigInt {
    return this[10].toBigInt();
  }
}
