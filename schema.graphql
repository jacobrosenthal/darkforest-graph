type Player @entity {
    "0x prefixed hex string, zero padded"
    id: ID!
    initTimestamp: Int!
    "allows null because 0x0000000000000000000000000000000000000000 has no homeWorld"
    homeWorld: Planet
    planets: [Planet!]! @derivedFrom(field: "owner")
}

type Planet @entity {
    "0 padded hex version of locationDec, no 0x prefix"
    id: ID!
    "locationDec version of locationid"
    locationDec: BigInt!
    owner: Player!
    isInitialized: Boolean!
    createdAt: Int!
    lastUpdated: Int!
    perlin: Int!
    range: Int!
    speed: Int!
    defense: Int!
    energyLazy: Int!
    energyCap: Int!
    energyGrowth: Int!
    silverCap: Int!
    silverGrowth: Int!
    silverLazy: Int!
    planetLevel: Int!
    rangeUpgrades: Int!
    speedUpgrades: Int!
    defenseUpgrades: Int!
    isEnergyCapBoosted: Boolean!
    isEnergyGrowthBoosted: Boolean!
    isRangeBoosted: Boolean!
    isSpeedBoosted: Boolean!
    isDefenseBoosted: Boolean!
    hatLevel: Int!
    planetResource: PlanetResource!
    spaceType: SpaceType!
    "Computed silver cost of applied upgrades"
    silverSpentComputed: Int!
    hasTriedFindingArtifact: Boolean!
    heldArtifactId: Int!
    artifactLockedTimestamp: Int!
}

type DepartureQueue @entity  {
    "current blocktime of ArrivalQueue event. events are triggered before blockhandler so will be detected and processed by upcoming blockhandler of same blocktime"
    id: ID!
    arrivalIds: [BigInt!]!
}

type ArrivalQueue @entity  {
    "decimal arrivalTime as a string"
    id: ID!
    arrivals: [Arrival!]!
}

type Meta @entity  {
    id: ID!
    "the last block timestamp the block handler processed arrivals for"
    lastProcessed: Int!
}

type Arrival @entity {
    "decimal arrivalid as a string"
    id: ID!
    "same as id, but sortable because its an int"
    arrivalId: Int!
    player: Player!
    fromPlanet: Planet!
    toPlanet: Planet!
    energyArriving: Int!
    silverMoved: Int!
    departureTime: Int!
    arrivalTime: Int!
    receivedAt: Int!
    processedAt: Int
}

type Hat @entity {
    "0 padded hex version of locationDec, no 0x prefix"
    id: ID!
    "same as id, but linked to planets entity"
    planet: Planet!
    player: Player!
    hatLevel: Int
    timestamp: Int
}

type Upgrade @entity {
    "0 padded hex version of locationDec, no 0x prefix"
    id: ID!
    "same as id, but linked to planets entity"
    planet: Planet!
    player: Player!
    timestamp: Int
}

enum PlanetResource {
    NONE
    SILVER
}

enum SpaceType {
    NEBULA
    SPACE
    DEEP_SPACE
}

type Artifact @entity {
    "decimal artifactid as a string"
    id: ID!
    "same as id, but sortable because its an int"
    artifactId: Int!
    planetDiscoveredOn: Int!
    planetLevel: Int!
    planetBiome: Biome!
    mintedAtTimestamp: Int!
    discoverer: Player!
    artifactType: ArtifactType!
}

enum ArtifactType {
    UNKNOWN
    OBELISK
    COLOSSUS
    SHIPWRECK
    FOSSIL
}

enum Biome {
    UNKNOWN,
    OCEAN,
    FOREST,
    JUNGLE,
    TUNDRA,
    SWAMP,
    DESERT,
    ICE,
    WASTELAND,
    LAVA,
}
